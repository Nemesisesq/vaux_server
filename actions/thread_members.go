package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/nemesisesq/vaux_server/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (ThreadMember)
// DB Table: Plural (thread_members)
// Resource: Plural (ThreadMembers)
// Path: Plural (/thread_members)
// View Template Folder: Plural (/templates/thread_members/)

// ThreadMembersResource is the resource for the ThreadMember model
type ThreadMembersResource struct {
	buffalo.Resource
}

// List gets all ThreadMembers. This function is mapped to the path
// GET /thread_members
func (v ThreadMembersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	threadMembers := &models.ThreadMembers{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all ThreadMembers from the DB
	if err := q.All(threadMembers); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, threadMembers))
}

// Show gets the data for one ThreadMember. This function is mapped to
// the path GET /thread_members/{thread_member_id}
func (v ThreadMembersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty ThreadMember
	threadMember := &models.ThreadMember{}

	// To find the ThreadMember the parameter thread_member_id is used.
	if err := tx.Find(threadMember, c.Param("thread_member_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, threadMember))
}

// New renders the form for creating a new ThreadMember.
// This function is mapped to the path GET /thread_members/new
func (v ThreadMembersResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.ThreadMember{}))
}

// Create adds a ThreadMember to the DB. This function is mapped to the
// path POST /thread_members
func (v ThreadMembersResource) Create(c buffalo.Context) error {
	// Allocate an empty ThreadMember
	threadMember := &models.ThreadMember{}

	// Bind threadMember to the html form elements
	if err := c.Bind(threadMember); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(threadMember)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, threadMember))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "ThreadMember was created successfully")

	// and redirect to the thread_members index page
	return c.Render(201, r.Auto(c, threadMember))
}

// Edit renders a edit form for a ThreadMember. This function is
// mapped to the path GET /thread_members/{thread_member_id}/edit
func (v ThreadMembersResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty ThreadMember
	threadMember := &models.ThreadMember{}

	if err := tx.Find(threadMember, c.Param("thread_member_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, threadMember))
}

// Update changes a ThreadMember in the DB. This function is mapped to
// the path PUT /thread_members/{thread_member_id}
func (v ThreadMembersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty ThreadMember
	threadMember := &models.ThreadMember{}

	if err := tx.Find(threadMember, c.Param("thread_member_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind ThreadMember to the html form elements
	if err := c.Bind(threadMember); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(threadMember)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, threadMember))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "ThreadMember was updated successfully")

	// and redirect to the thread_members index page
	return c.Render(200, r.Auto(c, threadMember))
}

// Destroy deletes a ThreadMember from the DB. This function is mapped
// to the path DELETE /thread_members/{thread_member_id}
func (v ThreadMembersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty ThreadMember
	threadMember := &models.ThreadMember{}

	// To find the ThreadMember the parameter thread_member_id is used.
	if err := tx.Find(threadMember, c.Param("thread_member_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(threadMember); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "ThreadMember was destroyed successfully")

	// Redirect to the thread_members index page
	return c.Render(200, r.Auto(c, threadMember))
}
