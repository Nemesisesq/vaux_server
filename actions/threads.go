package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/nemesisesq/vaux_server/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Thread)
// DB Table: Plural (threads)
// Resource: Plural (Threads)
// Path: Plural (/threads)
// View Template Folder: Plural (/templates/threads/)

// ThreadsResource is the resource for the Thread model
type ThreadsResource struct {
	buffalo.Resource
}

// List gets all Threads. This function is mapped to the path
// GET /threads
func (v ThreadsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	threads := &models.Threads{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Threads from the DB
	if err := q.All(threads); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, threads))
}

// Show gets the data for one Thread. This function is mapped to
// the path GET /threads/{thread_id}
func (v ThreadsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Thread
	thread := &models.Thread{}

	// To find the Thread the parameter thread_id is used.
	if err := tx.Find(thread, c.Param("thread_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, thread))
}

// New renders the form for creating a new Thread.
// This function is mapped to the path GET /threads/new
func (v ThreadsResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Thread{}))
}

// Create adds a Thread to the DB. This function is mapped to the
// path POST /threads
func (v ThreadsResource) Create(c buffalo.Context) error {
	// Allocate an empty Thread
	thread := &models.Thread{}

	// Bind thread to the html form elements
	if err := c.Bind(thread); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(thread)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, thread))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Thread was created successfully")

	// and redirect to the threads index page
	return c.Render(201, r.Auto(c, thread))
}

// Edit renders a edit form for a Thread. This function is
// mapped to the path GET /threads/{thread_id}/edit
func (v ThreadsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Thread
	thread := &models.Thread{}

	if err := tx.Find(thread, c.Param("thread_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, thread))
}

// Update changes a Thread in the DB. This function is mapped to
// the path PUT /threads/{thread_id}
func (v ThreadsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Thread
	thread := &models.Thread{}

	if err := tx.Find(thread, c.Param("thread_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Thread to the html form elements
	if err := c.Bind(thread); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(thread)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, thread))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Thread was updated successfully")

	// and redirect to the threads index page
	return c.Render(200, r.Auto(c, thread))
}

// Destroy deletes a Thread from the DB. This function is mapped
// to the path DELETE /threads/{thread_id}
func (v ThreadsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Thread
	thread := &models.Thread{}

	// To find the Thread the parameter thread_id is used.
	if err := tx.Find(thread, c.Param("thread_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(thread); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Thread was destroyed successfully")

	// Redirect to the threads index page
	return c.Render(200, r.Auto(c, thread))
}
